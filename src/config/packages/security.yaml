security:
    role_hierarchy:

        ROLE_USER:

        ROLE_ADMIN:

        access_decision_manager:
            strategy: unanimous

    encoders:
        App\Entity\User:
            algorithm: argon2i

    providers:
        entity_provider:
            entity:
                class: App\Entity\User

    firewalls:
        login:
            pattern:  ^/api/login
            stateless: true
            anonymous: true
            json_login:
                check_path:               /api/login
                success_handler:          lexik_jwt_authentication.handler.authentication_success
                failure_handler:          lexik_jwt_authentication.handler.authentication_failure

        register:
            pattern:  ^/api/users
            methods: [POST]
            stateless: true
            anonymous: true

        api:
            pattern:   ^/api/toto
            stateless: true
            anonymous: false
            provider: entity_provider
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/register, roles: IS_AUTHENTICATED_ANONYMOUSLY }